import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import os
import time
import sys

# Initialisiere das Hauptfenster
root = tk.Tk()
root.title("Escape Room: Sprachenpuzzle")
root.geometry("800x800")

# Globale Variablen für die Aufgabe und Antworten
current_task = 0
tasks = [
    {
        "question": "Aufgabe 1:\n\nDu siehst eine verschlossene Tür mit einem Zettel darauf.\nAuf dem Zettel steht: 'What's the English word for 'Schlüssel'?'",
        "answer": "key",
        "background-color": "white", 
        "background_image": "images/Tuer.png"  # Lokales Bild
    },
    {
        "question": """Aufgabe 2:\n\nDu betrittst den nächsten Raum und findest eine verschlossene Kiste. \nDu untersuchst sie und findest ein Buchstabenschloss.
\nAuf der Kiste selbst steht: 'Wie lautet das deutsche Wort für 'mirror'?'""",
        "answer": "spiegel",
        "background-color": "white", 
        "background_image": "images/Kiste.png"  # Lokales Bild
    },
    {
        "question": """Aufgabe 3:\n \nDu gibst das Wort Spiegel ein und die Kiste öffnet sich. Darin findest einen Zettel und einen Smaragd.
Auf dem Zettel steht: „Setze mich an die Grenze zwischen Heiss und Kalt, an die Stelle,
die deine Sicht auf die Welt verändert und dir zugleich Zuflucht bietet. \nWas ist die englische Übersetzung dieses Objekts?""",
        "answer": "window",
        "background-color": "white", 
        "background_image": "images/Notiz.png"  # Lokales Bild
    },
    {
        "question": """Du schaust auf und siehst rechts von dir ein altes, hölzernes Fenster mit einer Kerbe an der Stelle, wo sich sonst der Griff befindet.
\nDu fügst den Smaragd in die Kerbe. Daraufhin hörst du eine Stimme, die dir sagt: \nWer da? Wer weckt mich aus meinem Schlaf?
... Ach ja, wieder ein Rätselfanatiker. Nun denn, fangen wir an.
\nWonach streben alle Menschen? Wenn du sie nicht hast, bleibt dir der Zugang zur Welt verwehrt. Wie heisst die englische Übersetzung für dieses Wort?""",
        "answer": "freedom",
        "background-color": "white", 
        "background_image": "images/Fenster.png"  # Lokales Bild
    }
]

# Timer-Variable (zum Beispiel 5 Minuten oder 300 Sekunden)
time_remaining = 300

def resource_path(relative_path):
    """ Gibt den absoluten Pfad zu einer Ressource zurück, kompatibel mit PyInstaller """
    try:
        base_path = sys._MEIPASS  # Wird von PyInstaller gesetzt, wenn --onefile verwendet wird
    except AttributeError:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

# Funktionen für das Spiel
def check_answer():
    global current_task
    answer = answer_entry.get().strip().lower()
    if answer == tasks[current_task]["answer"]:
        messagebox.showinfo("Richtig!", "Die Antwort ist korrekt!")
        answer_entry.delete(0, tk.END)
        if current_task < len(tasks) - 1:
            current_task += 1
            load_task()
        else:
            messagebox.showinfo("Geschafft!", "Herzlichen Glückwunsch, du hast den Escape Room erfolgreich verlassen!")
            root.quit()
    else:
        messagebox.showwarning("Falsch", "Leider ist das nicht korrekt. Versuche es noch einmal.")

def load_task():
    # Lade und setze das Hintergrundbild aus einer lokalen Datei
    try:
        bg_image_path = resource_path(tasks[current_task]["background_image"])
        if not os.path.exists(bg_image_path):
            raise FileNotFoundError(f"Das Bild '{bg_image_path}' wurde nicht gefunden.")
        
        # Bild öffnen und skalieren
        bg_image = Image.open(bg_image_path)
        bg_image = bg_image.resize((root.winfo_width(), root.winfo_height()), Image.ANTIALIAS)
        bg_photo = ImageTk.PhotoImage(bg_image)
        
        # Setze das Hintergrundbild
        background_label.config(image=bg_photo)
        background_label.image = bg_photo
    except Exception as e:
        messagebox.showerror("Fehler", f"Hintergrundbild konnte nicht geladen werden: {e}")

    # Aktualisiere die Frage und den Bild-Link
    question_label.config(text=tasks[current_task]["question"])

def on_resize(event):
    # Wenn das Fenster resized wird, passe das Hintergrundbild an
    load_task()

# Timer-Funktion
def update_timer():
    global time_remaining
    minutes, seconds = divmod(time_remaining, 60)
    timer_label.config(text=f"Zeit: {minutes:02}:{seconds:02}")
    if time_remaining > 0:
        time_remaining -= 1
        root.after(1000, update_timer)  # Timer wird jede Sekunde aktualisiert
    else:
        messagebox.showinfo("Zeit abgelaufen", "Die Zeit ist abgelaufen. Du hast den Escape Room nicht rechtzeitig verlassen.")
        root.quit()

# Hintergrundbild Label
background_label = tk.Label(root)
background_label.place(x=0, y=0, relwidth=1, relheight=1)

# Weißes, halbtransparentes Panel für Text und Eingabefeld
panel = tk.Frame(root, bg="white", bd=5, relief="groove")
panel.place(x=0, y=0, width=500, height=400)  # Festlegung der Position und Größe des Panels

# Timer-Label im Panel
timer_label = tk.Label(panel, text="Zeit: 05:00", bg="white", fg="black", font=("Arial", 12, "bold"))
timer_label.pack(pady=5)

# GUI-Elemente auf dem Panel
question_label = tk.Label(panel, text="", wraplength=400, justify="left", bg="white", fg="black", font=("Arial", 12))
question_label.pack(pady=20)

answer_entry = tk.Entry(panel, width=30, font=("Arial", 12))
answer_entry.pack(pady=10)

submit_button = tk.Button(panel, text="Antwort prüfen", command=check_answer, font=("Arial", 10))
submit_button.pack(pady=5)

# Lade die erste Aufgabe
load_task()
update_timer()

# Verknüpfe das Resize-Ereignis mit der on_resize-Funktion
root.bind("<Configure>", on_resize)

# Starte das GUI-Hauptfenster
root.mainloop()
